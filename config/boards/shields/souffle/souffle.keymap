#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define HYPER LS(LC(LA(LGUI)))
#define MEH LC(LA(LGUI))

#define TIMEOUT 30
#define COMBO_LAYER 1

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 50
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 59
#define THUMBS 51 52 53 54 55 56 57 58 42 43

/ {
    combos {
        compatible = "zmk,combos";
        bootloader_central {
            timeout-ms = <30>;
            key-positions = <6 9>;
            bindings = <&bootloader>;
            layers = <1>;
        };

        combo_h1 {
            timeout-ms = <TIMEOUT>;
            key-positions = <27 28>;
            bindings = <&kp EQUAL>;
            layers = <COMBO_LAYER>;
        };
        combo_h2 {
            timeout-ms = <TIMEOUT>;
            key-positions = <26 27>;
            bindings = <&kp MINUS>;
            layers = <COMBO_LAYER>;
        };
        combo_h3 {
            timeout-ms = <TIMEOUT>;
            key-positions = <25 26>;
            bindings = <&kp PLUS>;
            layers = <COMBO_LAYER>;
        };
        combo_h4 {
            timeout-ms = <TIMEOUT>;
            key-positions = <25 28>;
            bindings = <&kp EXCL>;
            layers = <COMBO_LAYER>;
        };
        combo_h5 {
            timeout-ms = <TIMEOUT>;
            key-positions = <26 28>;
            bindings = <&kp AMPS>;
            layers = <COMBO_LAYER>;
        };
        combo_h6 {
            timeout-ms = <TIMEOUT>;
            key-positions = <25 27>;
            bindings = <&kp PIPE>;
            layers = <COMBO_LAYER>;
        };

        combo_t1 {
            timeout-ms = <TIMEOUT>;
            key-positions = <15 16>;
            bindings = <&kp FSLH>;
            layers = <COMBO_LAYER>;
        };
        combo_t2 {
            timeout-ms = <TIMEOUT>;
            key-positions = <14 15>;
            bindings = <&kp HASH>;
            layers = <COMBO_LAYER>;
        };
        combo_t3 {
            timeout-ms = <TIMEOUT>;
            key-positions = <13 14>;
            bindings = <&kp BSLH>;
            layers = <COMBO_LAYER>;
        };
        combo_t4 {
            timeout-ms = <TIMEOUT>;
            key-positions = <13 16>;
            bindings = <&kp AT>;
            layers = <COMBO_LAYER>;
        };
        combo_t5 {
            timeout-ms = <TIMEOUT>;
            key-positions = <14 16>;
            bindings = <&kp DLLR>;
            layers = <COMBO_LAYER>;
        };
        combo_t6 {
            timeout-ms = <TIMEOUT>;
            key-positions = <13 15>;
            bindings = <&kp CARET>;
            layers = <COMBO_LAYER>;
        };

        combo_b1 {
            timeout-ms = <TIMEOUT>;
            key-positions = <39 40>;
            bindings = <&kp QMARK>;
            layers = <COMBO_LAYER>;
        };
        combo_b2 {
            timeout-ms = <TIMEOUT>;
            key-positions = <38 39>;
            bindings = <&kp ASTRK>;
            layers = <COMBO_LAYER>;
        };
        combo_b3 {
            timeout-ms = <TIMEOUT>;
            key-positions = <37 38>;
            bindings = <&kp PRCNT>;
            layers = <COMBO_LAYER>;
        };
        combo_b4 {
            timeout-ms = <TIMEOUT>;
            key-positions = <37 40>;
            bindings = <&kp COLON>;
            layers = <COMBO_LAYER>;
        };
        combo_b5 {
            timeout-ms = <TIMEOUT>;
            key-positions = <38 40>;
            bindings = <&kp GRAVE>;
            layers = <COMBO_LAYER>;
        };
        combo_b6 {
            timeout-ms = <TIMEOUT>;
            key-positions = <37 39>;
            bindings = <&kp TILDE>;
            layers = <COMBO_LAYER>;
        };

    };
};

/ {
    macros {
        fnArrow: fnArrow {
            label = "fnArrow";
            compatible = "zmk,behavior-macro";
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings = <&kp KP_EQUAL &kp GREATER_THAN>;
        };
    };
};

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmll: homerow_mods_left_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmrl: homerow_mods_right_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };
};
	keymap {
	    compatible = "zmk,keymap";
	    layer_0 {
			bindings = <
                &none           &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                          &kp N6          &kp N7          &kp N8          &kp N9          &kp N0         &none
                &none           &kp Q           &kp W           &kp F           &kp P           &kp B                                           &kp J           &kp L           &kp U           &kp Y           &kp APOS       &none
                &none           &kp A           &kp R           &kp S           &kp T           &hmll 1 G                                       &hmrl 1 M       &kp N           &kp E           &kp I           &kp O          &none
                &none           &hml LALT Z     &hml LGUI X     &hml LSHFT C    &hml MEH D      &kp V           &mo 1               &kp C_PP    &kp K           &hmr MEH H      &hmr LCTRL COMMA &hmr LGUI DOT  &hmr LALT FSLH &none
                &none                                           &none           &none           &kp SPACE       &kp LCTRL           &mo 1       &kp LSHFT       &none           &none                                          &none
			>;
		};
        layer_1 {
			bindings = <
                &trans          &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                                          &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &trans
                &trans          &kp LBKT        &kp RBKT        &kp LPAR        &kp RPAR        &kp F11                                         &kp F12         &kp INS         &trans          &trans          &kp GRAVE       &trans
                &trans          &kp ESC         &kp TAB		    &kp ENTER       &kp BSPC        &fnArrow                                        &none           &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &trans
                &trans          &kp SEMI        &kp LBRC        &kp RBRC        &kp DEL         &kp UNDER       &trans              &kp C_NEXT  &none           &kp HOME        &kp PG_DN       &kp PG_UP       &kp END         &trans
                &trans                                          &trans          &trans          &trans          &trans              &trans      &trans          &trans          &trans                                          &trans
		    >;
		};
	};
};

//              &none           &none           &none           &none           &none           &none                                           &none           &none           &none           &none           &none           &none
//              &none           &none           &none           &none           &none           &none                                           &none           &none           &none           &none           &none           &none
//              &none           &none           &none           &none           &none           &none                                           &none           &none           &none           &none           &none           &none
//              &none           &none           &none           &none           &none           &none           &none               &none       &none           &none           &none           &none           &none           &none
//              &none                                           &none           &none           &none           &none               &none       &none           &none           &none                                           &none


//	            0               1               2               3               4               5                                               6               7               8               9               10              11
//              12              13              14              15              16              17                                              18              19              20              21              22              23
//              24              25              26              27              28              29                                              30              31              32              33              34              35
//              36              37              38              39              40              41              42                  43          44              45              46              47              48              49
//              50                                              51              52              53              54                  55          56              57              58                                              59