/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&sk {
    quick-release;
};



/ {
    macros {
        fnArrow: fnArrow {
            label = "ZM_fnArrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_EQUAL &kp GREATER_THAN>;
        };
    };
};

/ {
    behaviors {
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
	keymap {
		compatible = "zmk,keymap";
		layer_0 {
			bindings = <
                &none   AS(Q)           AS(W)           AS(F)           AS(P)           AS(B)                                                       AS(J)           AS(L)           AS(U)           AS(Y)           AS(APOS)        &none
                &none   AS(A)           AS(R)           AS(S)           AS(T)           AS(G)                                                       AS(M)           AS(N)           AS(E)           AS(I )          AS(O)           &none
                &none   AS(Z)           AS(X)           AS(C)           AS(D)           AS(V)           &none   &none       &none   &none           AS(K)           AS(H)           AS(COMMA)       AS(DOT  )       AS(FSLH)        &none
                                                        &none           &none           &kp SPACE       &mo 1   &none       &none   &mo 2           &kp BSPC        &none
			>;
		};   
        layer_1 {
			bindings = <
                &trans  &sk LGUI        &sk LALT        &kp LC(F)       &kp BSPC        &kp DEL                                                     &kp CARET       &kp C_PP        &kp C_NEXT      &kp TILDE       &kp GRAVE       &trans
                &trans  &kp ESC         &kp ENTER       &sk LCTRL       &sk LSHFT       &caps_word                                                  &kp PRCNT       &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &trans
                &trans  &kp LC(Z)       &td1            &kp LC(V)       &kp TAB         &kp INS     &trans      &trans      &trans      &trans      &kp DLLR        &kp HOME        &kp PG_DN       &kp PG_UP       &kp END         &trans
                                                        &trans          &trans          &trans      &none       &trans      &trans      &mo 3       &sk LSHFT       &trans      
            >;
		};
        layer_2 {
			bindings = <
                &trans  &kp UNDER       &kp COLON       &kp AMPS        &kp PIPE        &fnArrow                                                    &kp PLUS        &kp N7          &kp N8          &kp N9          &kp ASTRK       &trans
                &trans  &kp SEMI        &kp EXCL        &kp LBRC        &kp LPAR        &kp LBKT                                                    &kp MINUS       &kp N4          &kp N5          &kp N6          &kp EQUAL       &trans
                &trans  &kp HASH        &kp AT          &kp RBRC        &kp RPAR        &kp RBKT    &trans      &trans      &trans      &trans      &kp N0          &kp N1          &kp N2          &kp N3          &kp BSLH        &trans
    	                                                &trans          &trans          &trans      &mo 3       &trans      &trans      &none       &trans          &trans          &trans 
            >;
		};   
        layer_3 {
			bindings = <
                &trans  &bootloader     &trans          &kp CAPS        &kp PSCRN       &trans                                                      &kp F12          &kp F7         &kp F8          &kp F9          &kp LC(PLUS)    &trans
                &trans  &sk LGUI        &sk LALT        &sk LCTRL       &sk LSHFT       &sk LG(LS(LA(LCTRL)))                                       &kp F11          &kp F4         &kp F5          &kp F6          &kp LC(MINUS)   &trans
                &trans  &trans          &trans          &trans          &kp K_APP       &trans      &trans      &trans      &trans      &trans      &kp F10          &kp F1         &kp F2          &kp F3          &kp LC(N0)      &trans
                                                        &trans          &trans          &trans      &trans      &trans      &trans      &trans      &trans          &trans          &trans
            >;
		};  
	};
};

//	            &trans  &trans          &trans          &trans          &trans          &trans                                                      &trans          &trans          &trans          &trans          &trans          &trans
//	            &trans  &trans          &trans          &trans          &trans          &trans                                                      &trans          &trans          &trans          &trans          &trans          &trans
//	            &trans  &trans          &trans          &trans          &trans          &trans      &trans      &trans      &trans      &trans      &trans          &trans          &trans          &trans          &trans          &trans
//	                                                    &trans          &trans          &trans      &trans      &trans      &trans      &trans      &trans          &trans          &trans